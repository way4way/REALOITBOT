import random

from loader import bot
from utils.other import b_msg
from data.sqlite import Database
from data.config import ahc_chat_id, oit_chat_id, drivers_chat_id
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

db = Database()


write_oit_problem_text = b_msg(f'‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <code>–û–ò–¢</code>\n\n'
                               f'‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
write_ahc_problem_text = b_msg(f'‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <code>–ê–•–ß</code>\n\n'
                               f'‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
write_driver_order_text = b_msg(f'‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <code>–í–æ–¥–∏—Ç–µ–ª—å</code>\n\n'
                                f'‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:')


async def check_problem_msg(way, text):
    msg = f'–í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <code>{way}</code>\n\n'
    if way == '–í–æ–¥–∏—Ç–µ–ª–∏':
        msg += f'–ó–∞–∫–∞–∑:'
    else:
        msg += f'–ü—Ä–æ–±–ª–µ–º–∞:'
    msg += f' <code>{text}</code>\n\n"‚úÖ" - –û—Ç–ø—Ä–∞–≤–∏—Ç—å {"–∑–∞–∫–∞–∑" if way == "–í–æ–¥–∏—Ç–µ–ª–∏" else "–ø—Ä–æ–±–ª–µ–º—É"} –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É | "‚ùå" - –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('‚úÖ', callback_data='1'))
    kb.insert(InlineKeyboardButton('‚ùå', callback_data='hide'))
    return b_msg(msg), kb


async def send_problem_msg(way, text, user_id):
    user_info = await db.get_user(user_id=user_id)
    username = user_info[1]
    address = user_info[3]
    phone = user_info[4]
    pc_ip = user_info[5]
    msg = 'üîî –ó–∞–∫–∞–∑' if way == '–í–æ–¥–∏—Ç–µ–ª–∏' else 'üîî –ü—Ä–æ–±–ª–µ–º–∞'
    msg += f'\n\n<code>{text}</code>\n\n'
    if way == '–û–ò–¢' or way == '–ê–•–ß':
        msg += f'@{username} | <code>{address}</code> | <code>{phone}</code> | <code>{pc_ip}</code>'
    elif way == '–í–æ–¥–∏—Ç–µ–ª–∏':
        msg += f'@{username} | {phone}'
    msg += f'\n\n–°—Ç–∞—Ç—É—Å: <code>‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏</code>'
    app_id = random.randint(10000000, 99999999)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('‚ôªÔ∏è –í —Ä–∞–±–æ—Ç–µ', callback_data=f'app:1:{user_id}:{app_id}'))
    kb.insert(InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data=f'app:2:{user_id}:{app_id}'))
    if way == '–û–ò–¢':
        chat_id = oit_chat_id
    elif way == '–ê–•–ß':
        chat_id = ahc_chat_id
    else:
        chat_id = drivers_chat_id
    send_msg = await bot.send_message(chat_id=chat_id, text=b_msg(msg), reply_markup=kb)
    await send_msg.pin(disable_notification=True)
    msg = f'‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
    return b_msg(msg)


async def new_status_msg(message_text, new_status, user_id, app_id):
    kb = InlineKeyboardMarkup()
    if new_status == '1':
        msg = message_text.replace("‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", "‚ôªÔ∏è –í —Ä–∞–±–æ—Ç–µ")
        kb.add(InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data=f'app:2:{user_id}:{app_id}'))
    else:
        msg = message_text.replace("‚ôªÔ∏è –í —Ä–∞–±–æ—Ç–µ", "‚úÖ –ì–æ—Ç–æ–≤–æ").replace("‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", "‚úÖ –ì–æ—Ç–æ–≤–æ")
    try:
        await bot.send_message(chat_id=user_id, text=b_msg(f'üîî –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{app_id}: {"‚ôªÔ∏è –í —Ä–∞–±–æ—Ç–µ" if new_status == "1" else "‚úÖ –ì–æ—Ç–æ–≤–æ"}'))
    except Exception as ex:
        print(ex)
    return msg, kb


async def edit_description_msg(message_text, desc_text):
    if '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:' not in message_text:
        msg = (f'{message_text}\n\n'
               f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <code>{desc_text}</code></b>')
    else:
        text = message_text.split("\n\n<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
        msg = (f'{text[0]}\n\n'
               f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <code>{desc_text}</code></b>')
    return msg

